/*
 * Some things this build script file do:
 *     Java 1.8 required.
 *     Enable TestNG as unit test framework.
 *     Task 'run' (also enables "run file" support for NetBeans).
 *     Task 'reorganize' for reorganizing JMH result files.
 *     Task 'bench' to run benchmarks.
 *     Set compiler args "-Xlint:unchecked" and "-Xlint:deprecation".
 */

apply plugin: 'java'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    jcenter()
}

dependencies {
    testCompile group: 'org.testng', name: 'testng', version: '6.11'
    testCompile group: 'org.openjdk.jmh', name: 'jmh-core', version: '1.18'
    testCompile group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.18'
}

test {
    useTestNG()
    
    testLogging.showStandardStreams = true
    
    // Always run the test task:
    outputs.upToDateWhen {
        false
    }
    
    doLast {
        println 'Done. See the report at: ' + reports.html.entryPoint
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
    description += " (version $gradleVersion)"
}

task run(type: JavaExec, dependsOn: compileJava) {
    description 'Execute a specific class using a Gradle command-line argument like so "-PmainClass=com.x.y.MyClass".'
    
    if (project.hasProperty('mainClass')) {
        main = mainClass
    }
    
    classpath = sourceSets.main.runtimeClasspath
}

task reorganize(type: JavaExec, dependsOn: compileJava) {
    description 'Execute Reorganize class, please specify JMH:s result file like so "-Prf=my_result.txt".'
    main = 'com.martinandersson.qsb.benchmark.Reorganize';
    
    def rf = project.findProperty('rf') ?: System.properties['rf']
    
    if (rf) {
        systemProperties += ['rf': rf]
    }
    
    classpath = sourceSets.main.runtimeClasspath
}

task bench(type: JavaExec, dependsOn: [classes, testClasses]) {
    description = 'Run benchmarks. See the README.md file.'
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.martinandersson.qsb.benchmark.StartJmh';
    
    // Move expected Gradle properties to System properties for the JVM that boot the benchmark:
    ['r', 'tg', 'lf', 'rf', 'q'].each { p ->
        def arg = project.findProperty(p) ?: System.properties[p]
        
        if (arg) {
            systemProperties += [(p): arg]
        }
    }
}

[run, reorganize, bench].each { task ->
    task.group = 'Project-specific'
}

// Source: http://stackoverflow.com/a/22183825
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}